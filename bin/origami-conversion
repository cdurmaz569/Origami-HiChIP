#!/usr/bin/env perl

use strict;
use Switch;
use POSIX qw(floor);
use Getopt::Long;


my $showhelp = '';
my $center = 0;
my $bedmult = 1000;
my $oldformat = 0;
my $printpetcount = 0;

GetOptions("help|h"=>\$showhelp,
            "center|c:10"=>\$center,
            "bedmultiplier=i"=>\$bedmult,
            "oldformat"=>\$oldformat,
            "printpetcount|p"=>\$printpetcount)
or die "Error in parsing arguments";


sub helpmenu {
  print "origami-conversion <bed/bedpe/washu> <results file>\n";
}

sub tobed {
  my ($scorecolumn,$sep) = @_;
  my $i = 1;
  
  die "Bed multiplier must be an integer greater than 0!" if $bedmult <= 0;
  
  while(<F>) {
    chomp;
    my @arr = split /$sep/;
    
    next unless $arr[0] eq $arr[3]; # only print lines with intrachromosomal interactions (since BED is not designed to handle interchromsomal data)
    
    my $val = floor($arr[$scorecolumn]*$bedmult);
    my $size = ($arr[2]-$arr[1]) . ',' . ($arr[5]-$arr[4]);
    my $starts = ($arr[1]-$arr[1]) . ',' . ($arr[4]-$arr[1]);
    
    print "$arr[0]\t$arr[1]\t$arr[5]\tInteraction$i\t$val\t+\t$arr[1]\t$arr[1]\t0,0,0\t2\t$size\t$starts\n";
    $i++;
  }
}

sub tobedpe {
  my ($scorecolumn,$sep) = @_;

  while(<F>) {
    chomp;
    my @arr = split/$sep/;
  
    print "$arr[0]\t$arr[1]\t$arr[2]\t$arr[3]\t$arr[4]\t$arr[5]\tInteraction\t$arr[$scorecolumn]\t.\t.\n";
  }
}

sub towashu {
  my ($scorecolumn,$sep) = @_;


  while(<F>) {
    chomp;
    my @arr = split /$sep/;
    my ($chrom1,$start1,$end1,$chrom2,$start2,$end2) = @arr;
  
    next unless $arr[0] eq $arr[3]; # Remove interchromosomal interactions
    next if $arr[0] =~ /chrM/; # the browser doesn't like chrM
    
    if($center>0) {
      my $mid1 = ($end1-$start1)/2;
      my $mid2 = ($end2-$start2)/2;
      
      $center++ if( ($center%2) != 0 );
      
      my $half = $center/2;
      
      $end1 = $start1+$mid1+$half;
      $start1 = $start1+$mid1-$half;
      $end2 = $start2+$mid2+$half;
      $start2 = $start2+$mid2-$half;
    }
  
    print "$chrom1:$start1-$end1\t$chrom2:$start2-$end2\t$arr[$scorecolumn]\n";
  }
}

if( $showhelp eq 1 ) {
  helpmenu();
  exit 0;
}

if( scalar(@ARGV) < 2 ) {
  helpmenu("Not enough arguments passed");
  exit 1;
}



my $option = $ARGV[0];
my $file = $ARGV[1];

my $column = 12;
my $sep = "\t";

$column = 8 if ($printpetcount);

if( $oldformat ) {
  $sep = ",";
  $column = 8;
  $column = 6 if ($printpetcount);
}

if( $file eq '-' ) {
  $file = "<&STDIN";
} elsif( ! -e $file ) {
  die "$file does not exist!";
}

die "Score column is not a number" unless $column =~ /\d+/;

open(F,"$file") or die "Cannot open $!";
<F>; # discard header line

switch($option) {
  case "bed"    { tobed($column,$sep); }
  case "bedpe"  { tobedpe($column,$sep); }
  case "washu"  { towashu($column,$sep); }
  else          { print "Error: Invalid option $option\n"; }
}
close(F);
