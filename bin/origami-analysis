#!/usr/bin/env bash

BASEDIR=$(dirname $0)
BINDIR=$BASEDIR/../bin
SCRIPTDIR=$BASEDIR/../scripts

### Output files
OUTPUTDIR=.
PREFIX=analysis
PEAKCOUNTFILE="$PREFIX-counts.bed"
INTCOUNTFILE="$PREFIX-int-counts.txt"
RESULTSFILE="$PREFIX-results.csv"
MODELFILE="$PREFIX-model-data.Rdata"


### Temporary files
TMPBAMPREFIX=bam$RANDOM.prefix



BURNIN=100
ITERATIONS=10000
PRUNE=5

MINIMODEL=yes
USEDISTANCE=yes
ZSCOREFILTER=no
ASSIGNTOPEAKS=no
ONLYMAP=no
USEDF=0
KEEPTMP=0
PARALLEL=no
PARALLELCORES=1
VERBOSE=no
ONLYINTRACHROMOSOMAL=no

### ChIA-PET specific
MERGEDIST=0
SLOPDIST=0
SLOPGENOME=null

### HiChIP specific
FRAGMENTSFILE=fragments.bed
USEALLPAIRSCHIPPROFILE=no
MERGEAFTER=0
MERGEROW=0
WINDOWSIZE=5
LOCALSIZE=2
STRIGENCY=0
GLMEPSILON=1e-8
FILEBACKED=FALSE
EXCLUDENOTWITHINDIST=0


### BAM files
BAMFILE=mapped_reads.rmdup.bam
SORTEDBAMFILE=mapped_reads.rmdup.sorted.bam
AUTOSORTBAMFILE=yes


helpmenu() {
  if [ $# -eq 1 ];
  then
    echo $1
  fi
  
  printf "Geneal syntax: origami-analysis [options] <analysis mode> <output prefix> <mode specific arguments>\n\n"
  
  printf "General options:\n"
  (printf " %s\t%s\n" "-h" "prints this help menu and exits"
  printf " %s\t%s\n" "-v, --verbose" "enables verbose output mode"
  printf " %s\t%s\n" "-p [INT]" "run MCMC in parallel mode with INT cores (default off)"
  printf " %s\t%s\n" "-o <DIR>, --output=<DIR>" "writes all the output files to directory DIR (default: ., i.e., current directory)"
  printf " %s\t%s\n" "-i <BAM file>, --input=<BAM file>" "the input BAM file to use for PET quantification (default: mapped_reads.rmdup.bam)"
  printf " %s\t%s\n" "--sorted-input=<BAM file>" "the sorted BAM file ot use for PET quantification, will generate by if not present (default: mapped_reads.rmdup.sorted.bam)"
  printf " %s\t%s\n" "--do-not-sort-bam-file" "stops origami-analysis from generating a sorted input BAM file if one is not already present, this will cause an error instead"
  printf " %s\t%s\n" "--prefix=<STRING>" "sets the file name prefix out all the output files to STRING (default: analysis)"
  printf " %s\t%s\n" "--save-full-model" "saves data from the full model (save the 'mini'-model data by default)"
  printf " %s\t%s\n" "--keep-tmp" "keeps temporary files") | column -t -s $'\t'

  printf "\n"
  printf "Model options:\n"
  (printf " %s\t%s\n" "--without-distance" "Turns off weighing interactions with a distance-driven weight"
  printf " %s\t%s\n" "--iterations=[positive integer]" "Sets the number of iterations for running the MCMC estimation (default 10000)"
  printf " %s\t%s\n" "--burn-in=[0 or positive integer]" "Sets the number of iterations to use as the burn-in period, separate from the --iterations (default 100, 0 means no burn-in period)"
  printf " %s\t%s\n" "--prune=[0 or >=2]" "Sets the number of steps at which to take an iteration rather than prune it (default 5, 0 means no pruning)"
  printf " %s\t%s\n" "--use-df=[positive number]" "Set effective degrees of freedom for the smooth spline calculation of distance") | column -t -s $'\t'
  
  printf "\n"

  printf "Long/AB linker mode: origami-analysis [options] <long OR ab> <Peak BED file>\n\n"
  printf "Options for ab and long linker mode:\n"
  (printf " %s\t%s\n" "--slop-dist=[positive integer]" "Set the slop distance on both ends of the peak (default 0, needs --slop-genome)"
  printf " %s\t%s\n" "--slop-genome=[file]" "Genome annotation file for size of each chromosome (default none, needs --slop-dist)"
  printf " %s\t%s\n" "--only-map-pets" "Only generate files for counting PETs at peaks and interactions, do not run the statistical modeling"
  printf " %s\t%s\n" "--peak-count-filter=[zscore]" "Filter peaks with greater than z-score (default no filtering)"
  printf " %s\t%s\n" "--join-nearby-peaks=[positive integer]" "For peaks within N distance, merge them together"
  printf " %s\t%s\n" "--assign-to-peaks" "Generates a secondary output where each end of an observed interaction fall on (one of) the original ChIP peak(s) [experimental]" ) | column -t -s $'\t'
  
  printf "\n"

  
  printf "HiChIP mode: origami-analysis [options] hichip <bin size> <RE site file>\n\n"
  (printf " %s\t%s\n" "-f <BED file>|--fragments-file=<BED file>" "set path to BED file with fragments in genome"
   printf " %s\t%s\n" "--strict|--very-strict" "set stringency for ChIP enrichment at ends of called loops"
   printf " %s\t%s\n" "--use-all-reads-for-peak-detection" "instead of only self-ligating reads, use all reads"
   printf " %s\t%s\n" "--minimum-points-per-row=[positive integer]" ""
   printf " %s\t%s\n" "--merge-after=[row index integer]" "" ) | column -t -s $'\t'
  
}

checkbamfile() {
  if [ $# -ne 0 ];
  then
    TESTFILE="$1"
    
    if [ ! -e "$TESTFILE" ]
    then
      echo "The requested BAM file, $TESTFILE, does not seem to exist!"
      exit 1
    fi
    
    samtools quickcheck $TESTFILE
    
    if [ $? -ne 0 ];
    then
      helpmenu "$TESTFILE does not appear to be a valid BAM file, please check"
      exit 1
    fi
  else
    echo "WARNING: BAM file check was called but no argument was passed"
  fi
}

sortbamfile() {
  if [ $# -ge 2 ];
  then
    BAMFILE="$1"
    SORTEDBAMFILE="$2"
    
    if [ -e "$SORTEDBAMFILE" ];
    then
      checkbamfile $SORTEDBAMFILE
    else
      if [ "$AUTOSORTBAMFILE" == "yes" ];
      then
        samtools sort -Ttmp -@ 8 $BAMFILE > $SORTEDBAMFILE
        
        if [ $? -ne 0 ];
        then
          echo "Error: failed to sort $BAMFILE"
          exit 1
        fi
          
      else
        echo "Cannot find $SORTEDBAMFILE and auto-sorting is off"
        exit 1
      fi
    fi
  else
    echo "WARNING: sortbamfile called with insufficient number of arguments"
  fi
}

longabmode() {
  if [ $# -lt 1 ];
  then
    helpmenu "Error: did not supply necessary file name arguments"
    exit 1
  fi

  PEAKFILE="$1"
  TMPPEAKFILE="$OUTPUTDIR/.$RANDOM.peaks.bed"
  GENOMEFILE="$OUTPUTDIR/.$RANDOM.ga.txt"
  
  if [ ! -e "$PEAKFILE" ]
  then
    helpmenu "Error: peak file $PEAKFILE does not exist!"
    exit 1
  fi


  if ([ $SLOPDIST -eq 0 ] && [ $SLOPGENOME != "null" ]) || ([ $SLOPDIST -gt 0 ] && [ $SLOPGENOME = "null" ])
  then
    helpmenu "Error: if specifying --slop-dist or --slop-genome, must specify the other"
    exit 1
  fi
  
  echo "Identifying PET counts in peaks and interactions..."
  
  $SCRIPTDIR/extract-genome-annotation.pl $READSFILE $GENOMEFILE


  cut -f 1,2,3 $PEAKFILE | bedtools sort -faidx $GENOMEFILE > $TMPPEAKFILE

  if [ $MERGEDIST -gt 0 ];
  then
    OUTFILE="$OUTPUTDIR/.$PREFIX.merge.bed"
    bedtools merge -i $TMPPEAKFILE -d $MERGEDIST > $OUTFILE
    cp $OUTFILE $TMPPEAKFILE
  fi

  if [ $SLOPDIST -gt 0 ];
  then
    OUTFILE="$OUTPUTDIR/.$PREFIX.slop.bed"
    bedtools slop -i $TMPPEAKFILE -g $SLOPGENOME -b $SLOPDIST | bedtools merge > $OUTFILE
    cp $OUTFILE $TMPPEAKFILE
  fi
  

  if [ ! -e "$PEAKCOUNTFILE" ];
  then
    bedtools coverage -counts -sorted -a $TMPPEAKFILE -b $SORTEDREADSFILE | gzip -c > $PEAKCOUNTFILE
    
    if [ $? -ne 0 ]
    then
      echo "Error: failed to get ChIP read peak count, see error messageS"
      exit 1
    fi
  fi

  if [ "$ZSCOREFILTER" != "no" ];
  then
    FILTERBEDTMP="$OUTPUTDIR/.$RANDOM.keeppeaks.bed"
    TRANSTMP="$OUTPUTDIR/.$RANDOM.trans.out"
    Rscript $SCRIPTDIR/peaks-zscore.r $PEAKCOUNTFILE $FILTERBEDTMP $ZSCOREFILTER
    bedtools intersect -wa -a $PEAKCOUNTFILE -b $FILTERBEDTMP > $TRANSTMP
    mv $TRANSTMP $PEAKCOUNTFILE ## removed filtered counts
    bedtools intersect -wa -a $TMPPEAKFILE -b $FILTERBEDTMP > $TRANSTMP
    mv $TRANSTMP $TMPPEAKFILE ## remove filtered peaks
    rm $FILTERBEDTMP
  fi

  if [ ! -e "$INTCOUNTFILE" ];
  then
    bedtools pairtobed -bedpe -type both -abam $BAMFILE -b $TMPPEAKFILE | $SCRIPTDIR/estimate-counts.pl - | gzip -c > $INTCOUNTFILE

    if [ $? -ne 0 ]
    then
      echo "Error: failed to get PET count between ends of putative interactions, see error messageS"
      exit 1
    fi
  fi

  rm $TMPPEAKFILE 

  echo "Estimating interaction belief..."

  if [ $ONLYMAP == "no" ];
  then
    echo "Rscript $SCRIPTDIR/estimate-significance.r $PEAKCOUNTFILE $INTCOUNTFILE $RESULTSFILE $MODELFILE $ITERATIONS $BURNIN $PRUNE $MINIMODEL $USEDISTANCE $USEDF $MODE $PARALLEL $PARALLELCORES" ; 
    Rscript $SCRIPTDIR/estimate-significance.r $PEAKCOUNTFILE $INTCOUNTFILE $RESULTSFILE $MODELFILE $ITERATIONS $BURNIN $PRUNE $MINIMODEL $USEDISTANCE $USEDF $MODE $PARALLEL $PARALLELCORES
  fi

  if [ $ASSIGNTOPEAKS != "no" ] && [ $ONLYMAP == "no" ]
  then
    ANCHORS="$OUTPUTDIR/.$RANDOM.anchors.bed"
    OVERLAP="$OUTPUTDIR/.$RANDOM.anchors.bed"
    PEAKASSIGNED="$OUTPUTDIR/$PREFIX-results-peakassigned.csv"
    $SCRIPTDIR/extract-anchors.pl $RESULTSFILE > $ANCHORS
    bedtools intersect -wao -a $ANCHORS -b $PEAKFILE > $OVERLAP
    $SCRIPTDIR/reassign-anchors.pl $RESULTSFILE $OVERLAP > $PEAKASSIGNED
    rm $ANCHORS $OVERLAP
  fi
  
  rm $GENOMEFILE

}

hichipmode() {
  echo "WARNING: HiChIP analysis mode is still in experimental stages"
  
  if [ $# -lt 2 ];
  then
    helpmenu "Error: need to provide the genomic bin size and the RE digest BED file"
    exit 1
  fi
  
  BINSIZE="$1"
  RESITES="$2"
  GENOMEFILE="$OUTPUTDIR/.$RANDOM.ga.txt"
  FULLPREFIX="$OUTPUTDIR/$PREFIX"

  if [ "$BINSIZE" -lt 1 ];
  then
    echo "The genomic bin size must be non-negative"
    exit 1
  fi
  
  if [ ! -e "$RESITES" ]
  then
    echo "RE site file $RESITES does not exist!"
    exit 1
  fi

  echo "Extracting genome annotation from BAM file..."
  
  $SCRIPTDIR/extract-genome-annotation.pl $BAMFILE $GENOMEFILE

  if [ $? -ne 0 ];
  then
    echo "Failed to extract genome annotation from $BAMFILE"
    exit 1
  fi
  
  if [ ! -e "$GENOMEFILE" ]; ### sanity check
  then
    echo "Cannot find $GENOMEFILE!"
    exit 1
  fi
  
  echo "Getting bins across the genome..."
  
  BINFILE="$OUTPUTDIR/.$RANDOM.bin.bed"
  
  
  echo "Generating bins..."
  
  bedtools makewindows -g $GENOMEFILE -w $BINSIZE | awk 'BEGIN {i=1} { print $0 "\t" i; i++ }' | bedtools intersect -wa -c -a - -b $RESITES > $BINFILE
  
  if [ $? -ne 0 ];
  then
    echo "Failed to divide the genome into windows, see error messages"
    exit 1
  fi
  

  echo "Getting total read count in each bin..."

  if [ ! -e "$PEAKCOUNTFILE" ];
  then
  
    if [ "$USEALLPAIRSCHIPPROFILE" == "yes" ]
    then
      bedtools coverage -counts -sorted -a $BINFILE -b $SORTEDBAMFILE > $PEAKCOUNTFILE

      if [ $? -ne 0 ];
      then
        echo "Failed to get the count of reads per genomic bin, see error messages"
        exit 1
      fi
    else
      bedtools pairtobed -type both -bedpe -abam $BAMFILE -b $FRAGMENTSFILE | $SCRIPTDIR/hichip-analysis/identify-self-ligating-pets.pl | bedtools sort -faidx $GENOMEFILE | bedtools intersect -c -sorted -a $BINFILE -b - > $PEAKCOUNTFILE

      if [ $? -ne 0 ];
      then
        echo "Failed to get the count of reads per genomic bin, see error messages"
        exit 1
      fi
    fi
  fi
  

  echo "Identifying observed ligations between bins..."
  
  if [ ! -e "$INTCOUNTFILE" ];
  then
    bedtools pairtobed -bedpe -type both -abam $BAMFILE -b $BINFILE | $BINDIR/mapping-hichip-contacts - $BINFILE | sort -k1,1n -k2,2n | $SCRIPTDIR/assign-nearby-points.pl $PEAKCOUNTFILE $WINDOWSIZE $LOCALSIZE - > $INTCOUNTFILE


    if [ $? -ne 0 ];
    then
      echo "Failed to find overlaps of PETs between genomic bins, see error message"
      exit 1
    fi
  fi
  

  if [ "$KEEPTMP" == "no" ];
  then
    rm $BINFILE $GENOMEFILE
  fi

  echo "Estimating interaction belief..."
  echo "Rscript $SCRIPTDIR/hichip-analysis/hichip.r $OUTPUTDIR $PREFIX $PEAKCOUNTFILE $INTCOUNTFILE $ITERATIONS $BURNIN $PRUNE $MINIMODEL $VERBOSE $MERGEAFTER $MERGEROW $STRIGENCY $GLMEPSILON $FILEBACKED $EXCLUDENOTWITHINDIST $ONLYINTRACHROMOSOMAL $PARALLEL $PARALLELCORES" ;
  Rscript $SCRIPTDIR/hichip-analysis/hichip.r $OUTPUTDIR $PREFIX $PEAKCOUNTFILE $INTCOUNTFILE $ITERATIONS $BURNIN $PRUNE $MINIMODEL $VERBOSE $MERGEAFTER $MERGEROW $STRIGENCY $GLMEPSILON $FILEBACKED $EXCLUDENOTWITHINDIST $ONLYINTRACHROMOSOMAL $PARALLEL $PARALLELCORES

  if [ $? -ne 0 ];
  then
    echo "Failed to estimate signifcance of individual chromatin contacts, see error message"
    exit 1
  fi

}



TEMP=`getopt -o hp:i:o:vw:l:f: -l verbose,iterations:,burn-in:,prune:,slop-dist:,slop-genome:,save-full-model,without-distance,peak-count-filter:,use-df:,assign-to-peaks,only-map-pets,join-nearby-peaks:,keep-tmp,input:,sorted-input:,do-no-sort-bam-file,output:,prefix:,minimum-points-per-row:,merge-after:,use-all-reads-for-peak-detection,fragments-file:,strict,very-strict,glm-epsilon:,large-matrices,keep-contacts-with-minimum-nearby-partners:,only-intrachromosomal -n 'origamianalysis' -- "$@"`
eval set -- "$TEMP"

while [ $# -ge 1 ]; do
	case "$1" in
		--)
			shift
			break
			;;
		-h)
			helpmenu
			exit 0
			;;
		-v|--verbose)
		  VERBOSE=yes
		  ;;
		-w)
		  WINDOWSIZE="$2"
		  shift
		  ;;
		-l)
		  LOCALSIZE="$2"
		  shift
		  ;;
		--iterations)
		  ITERATIONS="$2"
		  shift
		  ;;
		--burn-in)
		  BURNIN="$2"
		  shift
		  ;;
		--prune)
		  PRUNE="$2"
		  shift
		  ;;
		--slop-dist)
		  SLOPDIST="$2"
		  shift
		  ;;
		--slop-genome)
		  SLOPGENOME="$2"
		  shift
		  ;;
		--save-full-model)
		  MINIMODEL=no
		  ;;
		--without-distance)
		  USEDISTANCE=no
		  ;;
		--peak-count-filter)
		  ZSCOREFILTER="$2"
		  shift
		  ;;
		--use-df)
		  USEDF="$2"
		  shift
		  ;;
		--assign-to-peaks)
		  ASSIGNTOPEAKS=yes
		  ;;
		--only-map-pets)
		  ONLYMAP=yes
		  ;;
		--join-nearby-peaks)
		  MERGEDIST="$2"
		  shift
		  ;;
		--keep-tmp)
		  KEEPTMP=yes
		  ;;
		-p)
		  PARALLEL=yes
		  PARALLELCORES="$2"
		  shift
		  ;;
		-i|--input)
		  BAMFILE="$2"
		  shift
		  ;;
		--sorted-input)
		  SORTEDBAMFILE="$2"
		  shift
		  ;;
		--do-not-sort-bam-file)
		  AUTOSORTBAMFILE=no
		  ;;
		-o|--output)
		  OUTPUTDIR="$2"
		  shift
		  
		  if [ ! -e "$OUTPUTDIR" ]
		  then
		    mkdir $OUTPUTDIR
		    
		    if [ $? -ne 0 ]
		    then
		      helpmenu "Error: failed to create $OUTPUTDIR for the output"
		      exit 1
		    fi
		  fi
		  
		  if [ ! -d "$OUTPUTDIR" ]
		  then
		    helpmenu "Error: $OUTPUTDIR is not a directory"
		    exit 1
		  fi
		  ;;
		--prefix)
		  PREFIX="$2"

		  shift
		  ;;
		--minimum-points-per-row)
		  MERGEAFTER="$2"
		  shift
		  ;;
		--merge-after)
		  MERGEROW="$2"
		  shift
		  ;;
		--use-all-reads-for-peak-detection)
		  USEALLPAIRSCHIPPROFILE=yes
		  ;;
		-f|--fragments-file)
		  FRAGMENTSFILE="$2"
		  
		  if [ ! -e "$FRAGMENTSFILE" ]
		  then
		    helpmenu "Error: cannot find fragments BED file $FRAGMENTSFILE"
		    exit 1
		  fi
		  
		  shift
		  ;;
		--strict)  
		  STRIGENCY=1
		  ;;
		--very-strict)
		  STRIGENCY=2
		  ;;
		--glm-epsilon)
		  GLMEPSILON="$2"
		  shift
		  ;;
		  
		--large-matrices)
		  FILEBACKED=TRUE
		  ;;
		  
		--keep-contacts-with-minimum-nearby-partners)
		  EXCLUDENOTWITHINDIST="$2"
		  
		  if [ $EXCLUDENOTWITHINDIST -lt 1 ]
		  then
		    echo "This exclusion criterion value needs to be 1 or more"
		    exit 1
		  fi
		  
		  shift
		  ;;
		  
		--only-intrachromosomal)
		  ONLYINTRACHROMOSOMAL=yes
		  
		  ;;
	esac
	shift
done

if [ $# -lt 1 ];
then
  helpmenu "Error: no arguments provided"
  exit 1
fi

MODE="$1"
shift

checkbamfile $BAMFILE
sortbamfile $BAMFILE $SORTEDBAMFILE

PEAKCOUNTFILE="$OUTPUTDIR/$PREFIX-counts.bed"
INTCOUNTFILE="$OUTPUTDIR/$PREFIX-int-counts.txt"
RESULTSFILE="$OUTPUTDIR/$PREFIX-results.txt"
MODELFILE="$OUTPUTDIR/$PREFIX-model-data.Rdata"

case "$MODE" in
  long|ab)
    longabmode $@
    ;;
    
  hichip)
    hichipmode $@
    ;;
    
  *)
    helpmenu "Error: unknown analysis mode provided"
    exit 1
    ;;
esac

echo "Analysis completed!"
