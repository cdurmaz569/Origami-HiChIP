#!/usr/bin/env bash

## helper variables
DIRNAME=$(dirname $0)
BASEDIR=$(cd $DIRNAME; pwd)
BINDIR=$(cd $BASEDIR/../bin; pwd)
SCRIPTDIR=$(cd $BASEDIR/../scripts; pwd)

### command line options
OUTPUTDIR=output
VERBOSE=off
BSUBVERBOSE=off
SKIP=on
PARALLEL=off
RUNMODE=long
SPLITNUM=4000000
BZPOSTFIX="[.]bz2$"
BOWTIEIDX=notafile
KEEPTMP=no

FORWARDLINKER="ACGCGATATCTTATCTGACT"
REVERSELINKER="AGTCAGATAAGATATCGCGT"

ABLINKERA="CTGCTGTCCG"
ABLINKERB="CTGCTGTCAT"

HICHIPLIGATIONJUNCTION=none
HICHIPRESEQUENCE=none
HICHIPGENOMEFASTA=none

PREPROCESSINGCMD=cat

MINREADLENGTH=15
MACSGSIZE=hs
CALLBROADPEAK=no

## other variables
ORIGINALCMD="$0 $@"


### utility functions

verbose() {
	if [ "$VERBOSE" = on ]
	then
		NOWTIME=$(date)
		echo "[$NOWTIME] $1"
	fi
}

verbosecmd() {
  if [ "$VERBOSE" = on ]
  then
    NOWTIME=$(date)
    echo "[$NOWTIME] $@"
  fi
  eval "$@"
  
  if [ $? -ne 0 ];
  then
    echo "Failed to execute $@"
    exit 1
  fi
}

dispatch() {
        if [ "$PARALLEL" = on ]
        then
                bsub -K -q $LSFQUEUE -J origami -o $OUTPUTDIR/logs/cluster_log.txt "$@" &
        else
                eval "$@"
        fi
}

helpmenu() {
  if [ $# -eq 1 ];
  then
    echo $1
  fi
  
  printf "origami-alignment [options] <bowtie1 index> <first read FASTQ> <second read FASTQ>\n"
  printf "\tFor the FASTQ files, they may be either in plain text (no compression), gzip (.gz),\n"
  printf "\tor bzip2 (.bz2) format (automatically deteced by file suffix)\n\n"
  printf "%15s\t%-50s\n" "-o,--output=" "directory to output the alignment results (default is output/)"
  printf "%15s\t%-50s\n" "-h" "help menu (this menu)"
  printf "%15s\t%-50s\n" "-v" "activate verbose mode"
  printf "%15s\t%-50s\n" "--bsub-verbose" "turns on default bsub reporting when running in parallel mode (-p), implies -v (default write any bsub output to log file)"
  printf "%15s\t%-50s\n" "-m,--min-len=" "minimum read-length to keep post trimming (default is 15 bp)"
  printf "%15s\t%-50s\n" "-p" "run parallel LSF mode (currently requires bsub)"
  printf "%15s\t%-50s\n" "--lsf-queue=[queue]" "set the LSF queue to use in parallel mode (implies -p)"
  printf "%15s\t%-50s\n" "--keep-tmp" "don't delete the temporary files"
  printf "%15s\t%-50s\n" "--splitnum=[NUM]" "split input reads into NUM smaller files during paralleization (default 10000000)"
  printf "%15s\t%-50s\n" "--mode=[mode]" "run origami in long-read (long), AB-linker (ab), or HiChIP (hichip) mode (see documentation, default long)"
  printf "%15s\t%-50s\n" "--forward-linker=[DNA]"  "set the long-read foward-linker sequence (default ACGCGATATCTTATCTGACT)"
  printf "%15s\t%-50s\n" "--reverse-linker=[DNA]"  "set the long-read reverse-linker sequence (default AGTCAGATAAGATATCGCGT)"
  printf "%15s\t%-50s\n" "--a-linker=[DNA]" "set the AB-linker A-linker sequence (default CTGCTGTCCG)"
  printf "%15s\t%-50s\n" "--b-linker=[DNA]" "set the AB-linker B-linker sequence (default, CTGCTGTCAT)"
  printf "%15s\t%-50s\n" "--re-sequence=[DNA]" "set the DNA sequence recognized for restriction enzyme digest in HiChIP"
  printf "%15s\t%-50s\n" "--junction=[DNA]" "set the junction to look for in HiChIP"
  printf "%15s\t%-50s\n" "--genome-fasta=[DNA]" "set the genome set to look for the RE digestion site for HiChIP"
  printf "%15s\t%-50s\n" "--pp=[executable]" "run executable on each read file before trimming (must be executable, default none)"
  printf "%15s\t%-50s\n" "--macs-gsize=[string]" "set genome size for macs2 peak calling (default is 'hs')"
  printf "%15s\t%-50s\n" "--callbroadpeak" "calls broad peaks via macs2 and generates merged peak file"
  
}

checkbowtiefiles() {
  if [ $# -lt 1 ];
  then
    return 0
  fi
  
  EXPECTEDFILE="$1.1.ebwt"
  
  if [ ! -e "$EXPECTEDFILE" ];
  then
    helpmenu "Error: cannot find bowtie index"
    exit 1
  fi
}

### functions related to read processing

linkertrimming() {
  
  USEABLINKER="$1"
  case $USEABLINKER in
    yes)
      echo "Running in AB-linker trimming mode"
      ;;
    no)
      echo "Running in long-linker trimming mode"
      ;;
    *)
      ## this shouldn't get here, but in case it does default to long-linker mode
      echo "Running in long-linker trimming mode"
      ;;
  esac
  
  if [ $PARALLEL = "on" ]
  then
    dispatch "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/leftreads"
    dispatch "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/rightreads"
  
    wait 

    ## One assumption here is that split names the files in the same linear order -- maybe this should be done differently?
    LEFTREADS=($(ls $OUTPUTDIR/tmp/leftreads*))
    RIGHTREADS=($(ls $OUTPUTDIR/tmp/rightreads*))
    
    if [ $USEABLINKER = "yes" ]
    then
      AAPARAM="-a $ABLINKERA -A $ABLINKERA"
      BBPARAM="-a $ABLINKERB -A $ABLINKERB"
      ABPARAM="-a $ABLINKERA -A $ABLINKERB"
      BAPARAM="-a $ABLINKERB -A $ABLINKERA"
      NPARAM="-a $ABLINKERA -a $ABLINKERB -A $ABLINKERA -A $ABLINKERB"
      
      
      for((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch cutadapt -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $AAPARAM -o $OUTPUTDIR/tmp/l_same_aa_$i.fq -p $OUTPUTDIR/tmp/r_same_aa_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
      
        dispatch cutadapt -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BBPARAM -o $OUTPUTDIR/tmp/l_same_bb_$i.fq -p $OUTPUTDIR/tmp/r_same_bb_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

        dispatch cutadapt -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $ABPARAM -o $OUTPUTDIR/tmp/l_diff_ab_$i.fq -p $OUTPUTDIR/tmp/r_diff_ab_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

        dispatch cutadapt -f fastq -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BAPARAM -o $OUTPUTDIR/tmp/l_diff_ba_$i.fq -p $OUTPUTDIR/tmp/r_diff_ba_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
        
        dispatch cutadapt -f fastq -n 3 --overlap 10 -e 0 --discard-trimmed -m $MINREADLENGTH $NPARAM -o $OUTPUTDIR/tmp/l_neither_$i.fq -p $OUTPUTDIR/tmp/r_neither_$i.fq  ${LEFTREADS[$i]} ${RIGHTREADS[$i]}

      done
      
      wait

      dispatch "cat $OUTPUTDIR/tmp/l_same_aa_*.fq $OUTPUTDIR/tmp/l_same_bb_*.fq > $OUTPUTDIR/tmp/left_kept.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_same_aa_*.fq $OUTPUTDIR/tmp/r_same_bb_*.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_diff_ab_*.fq $OUTPUTDIR/tmp/l_diff_ba_*.fq > $OUTPUTDIR/tmp/left_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_diff_ab_*.fq $OUTPUTDIR/tmp/r_diff_ba_*.fq > $OUTPUTDIR/tmp/right_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/l_neither_*.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_neither_*.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"

      wait
    else

      for ((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch cutadapt -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/l_t1_$i.fq --untrimmed-output $OUTPUTDIR/tmp/l_nt1_$i.fq -p $OUTPUTDIR/tmp/r_t1_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/r_nt1_$i.fq ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
      done
      wait
  
      for ((i=0;i<${#LEFTREADS[@]};++i)); do
        dispatch cutadapt -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t2_$i.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt2_$i.fq -p $OUTPUTDIR/tmp/l_t2_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt2_$i.fq $OUTPUTDIR/tmp/r_nt1_$i.fq $OUTPUTDIR/tmp/l_nt1_$i.fq
      
        dispatch cutadapt -f fastq -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t3_$i.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt3_$i.fq -p $OUTPUTDIR/tmp/l_t3_$i.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt3_$i.fq $OUTPUTDIR/tmp/r_t1_$i.fq $OUTPUTDIR/tmp/l_t1_$i.fq
      done

      wait
  
      dispatch "cat $OUTPUTDIR/tmp/l_t3*.fq $OUTPUTDIR/tmp/l_nt3*.fq $OUTPUTDIR/tmp/l_t2*.fq > $OUTPUTDIR/tmp/left_kept.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_t3*.fq $OUTPUTDIR/tmp/r_nt3*.fq $OUTPUTDIR/tmp/r_t2*.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_nt2*.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_nt2*.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"

      wait
    fi
    
    $SCRIPTDIR/make-trimmed-reads-stat-report.pl dir $OUTPUTDIR/tmp $USEABLINKER $OUTPUTDIR/logs/trimming-report.txt
    
    rm $OUTPUTDIR/tmp/leftreads* $OUTPUTDIR/tmp/rightreads*

  else

    verbosecmd "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/left_reads.fq"
    
    verbosecmd "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD > $OUTPUTDIR/tmp/right_reads.fq"

    wait
    
    if [ $USEABLINKER = "yes" ]
    then
      AAPARAM="-a $ABLINKERA -A $ABLINKERA"
      BBPARAM="-a $ABLINKERB -A $ABLINKERB"
      ABPARAM="-a $ABLINKERA -A $ABLINKERB"
      BAPARAM="-a $ABLINKERB -A $ABLINKERA"
      
    
      dispatch cutadapt -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $AAPARAM -o $OUTPUTDIR/tmp/l_same_aa.fq -p $OUTPUTDIR/tmp/r_same_aa.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
      
      dispatch cutadapt -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BBPARAM -o $OUTPUTDIR/tmp/l_same_bb.fq -p $OUTPUTDIR/tmp/r_same_bb.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq

      dispatch cutadapt -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $ABPARAM -o $OUTPUTDIR/tmp/l_diff_ab.fq -p $OUTPUTDIR/tmp/r_diff_ab.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq

      dispatch cutadapt -n 3 --overlap 10 -e 0 --discard-untrimmed -m $MINREADLENGTH $BAPARAM -o $OUTPUTDIR/tmp/l_diff_ba.fq -p $OUTPUTDIR/tmp/r_diff_ba.fq  $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq

      dispatch "cat $OUTPUTDIR/tmp/l_same_aa.fq $OUTPUTDIR/tmp/l_same_bb.fq > $OUTPUTDIR/tmp/left_kept.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_same_aa.fq $OUTPUTDIR/tmp/r_same_bb.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_diff_ab.fq $OUTPUTDIR/tmp/l_diff_ba.fq > $OUTPUTDIR/tmp/left_chimeric.fq"
      
      dispatch "cat $OUTPUTDIR/tmp/r_diff_ab.fq $OUTPUTDIR/tmp/r_diff_ba.fq > $OUTPUTDIR/tmp/right_chimeric.fq"
    else

      dispatch cutadapt -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/l_t1.fq --untrimmed-output $OUTPUTDIR/tmp/l_nt1.fq -p $OUTPUTDIR/tmp/r_t1.fq --untrimmed-paired-output $OUTPUTDIR/tmp/r_nt1.fq $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
    
      wait
    
      dispatch cutadapt -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t2.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt2.fq -p $OUTPUTDIR/tmp/l_t2.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt2.fq $OUTPUTDIR/tmp/r_nt1.fq $OUTPUTDIR/tmp/l_nt1.fq
    
      dispatch cutadapt -n 3 -m $MINREADLENGTH --overlap 10 -a forward=$FORWARDLINKER -a reverse=$REVERSELINKER -o $OUTPUTDIR/tmp/r_t3.fq --untrimmed-output $OUTPUTDIR/tmp/r_nt3.fq -p $OUTPUTDIR/tmp/l_t3.fq --untrimmed-paired-output $OUTPUTDIR/tmp/l_nt3.fq $OUTPUTDIR/tmp/r_t1.fq $OUTPUTDIR/tmp/l_t1.fq

      wait

      dispatch "cat $OUTPUTDIR/tmp/l_t3.fq $OUTPUTDIR/tmp/l_nt3.fq $OUTPUTDIR/tmp/l_t2.fq > $OUTPUTDIR/tmp/left_kept.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_t3.fq $OUTPUTDIR/tmp/r_nt3.fq $OUTPUTDIR/tmp/r_t2.fq > $OUTPUTDIR/tmp/right_kept.fq"

      dispatch "cat $OUTPUTDIR/tmp/l_nt2.fq > $OUTPUTDIR/tmp/left_untrimmed.fq"
      dispatch "cat $OUTPUTDIR/tmp/r_nt2.fq > $OUTPUTDIR/tmp/right_untrimmed.fq"  

      wait
    fi
  fi
    
  rm $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq


  ### Cleanup
  rm $OUTPUTDIR/tmp/l_*.fq $OUTPUTDIR/tmp/r_*.fq

  if [ $USEABLINKER = 'yes' ]
  then
    dispatch "bzip2 $OUTPUTDIR/tmp/left_chimeric.fq"    
    dispatch "bzip2 $OUTPUTDIR/tmp/right_chimeric.fq"
  fi
  
  dispatch bzip2 $OUTPUTDIR/tmp/left_untrimmed.fq
  dispatch bzip2 $OUTPUTDIR/tmp/right_untrimmed.fq
  
  
  wait



  if [ $USEABLINKER = 'yes' ]
  then
    mv $OUTPUTDIR/tmp/left_chimeric.fq.bz2 $OUTPUTDIR/.
    mv $OUTPUTDIR/tmp/right_chimeric.fq.bz2 $OUTPUTDIR/.
  fi

  ## Keep untrimmed reads
  mv $OUTPUTDIR/tmp/left_untrimmed.fq.bz2 $OUTPUTDIR/.
  mv $OUTPUTDIR/tmp/right_untrimmed.fq.bz2 $OUTPUTDIR/.



  rm -f $OUTPUTDIR/tmp/left_unzip.fq  $OUTPUTDIR/tmp/right_unzip.fq

  echo "Aligning reads"

  if [ $PARALLEL == "on" ];
  then
    dispatch "split -l $SPLITNUM $OUTPUTDIR/tmp/left_kept.fq $OUTPUTDIR/tmp/leftkept"
    dispatch "split -l $SPLITNUM $OUTPUTDIR/tmp/right_kept.fq $OUTPUTDIR/tmp/rightkept"

    wait

    for FILE in $OUTPUTDIR/tmp/leftkept*
    do
  	  dispatch "bowtie -n 1 -m 1 -p 6 --sam $BOWTIEIDX $FILE > $FILE.sam; samtools view -Sb $FILE.sam > $FILE.bam; rm $FILE.sam"
    done

    for FILE in $OUTPUTDIR/tmp/rightkept*
    do
    	dispatch "bowtie -n 1 -m 1 -p 6 --sam $BOWTIEIDX $FILE > $FILE.sam; samtools view -Sb $FILE.sam > $FILE.bam; rm $FILE.sam"
    done

    wait

    dispatch "cd $OUTPUTDIR/tmp && samtools merge left_kept.bam leftkept*.bam"
    dispatch "cd $OUTPUTDIR/tmp && samtools merge right_kept.bam rightkept*.bam"

    wait

    dispatch "rm $OUTPUTDIR/tmp/leftkept* $OUTPUTDIR/tmp/rightkept*"
    wait
  else
    dispatch "bowtie -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/left_kept.fq > $OUTPUTDIR/tmp/left_kept.sam; samtools view -Sb $OUTPUTDIR/tmp/left_kept.sam > $OUTPUTDIR/tmp/left_kept.bam; rm $OUTPUTDIR/tmp/left_kept.sam"
    dispatch "bowtie -n 1 -m 1 -p 6 --sam $BOWTIEIDX $OUTPUTDIR/tmp/right_kept.fq > $OUTPUTDIR/tmp/right_kept.sam; samtools view -Sb $OUTPUTDIR/tmp/right_kept.sam > $OUTPUTDIR/tmp/right_kept.bam; rm $OUTPUTDIR/tmp/right_kept.sam"

    wait
  fi

  if [ $PARALLEL = "on" ];
  then
    dispatch "cd $OUTPUTDIR/tmp && samtools sort -Obam -Tlefttmp -n left_kept.bam > left_kept.sorted.bam"
  
    dispatch "cd $OUTPUTDIR/tmp && samtools sort -Obam -Trighttmp -n right_kept.bam > right_kept.sorted.bam"
  else
    cd $OUTPUTDIR/tmp
    dispatch "samtools sort -Obam -Tlefttmp -n left_kept.bam > left_kept.sorted.bam"
  
    dispatch "samtools sort -Obam -Trighttmp -n right_kept.bam > right_kept.sorted.bam"
    cd ../..
  fi

  wait

  dispatch "$BINDIR/mapped-reads-merge $OUTPUTDIR/tmp/left_kept.sorted.bam $OUTPUTDIR/tmp/right_kept.sorted.bam $OUTPUTDIR/mapped_reads.bam $OUTPUTDIR/logs/alignment-statistics.txt"

  wait


  rm $OUTPUTDIR/tmp/left_kept.sorted.bam $OUTPUTDIR/tmp/right_kept.sorted.bam

  echo "Filtering and processing PETs..."
  (
    cd $OUTPUTDIR
    $SCRIPTDIR/filter-and-process-pets.pl mapped_reads.bam .mapped_reads.rmdup.sam mapped_reads.rmdup.bam mapped_reads.rmdup.sorted.bam
  )


  echo "Calling peaks..."
  
  (
    cd $OUTPUTDIR
    dispatch "macs -t mapped_reads.bam -n macs1 -g $MACSGSIZE -f BAM --nomodel --nolambda -p 1e-9 --shiftsize 100"
  )

  macs2 callpeak -t $OUTPUTDIR/mapped_reads.bam -n peaks -g $MACSGSIZE --nomodel --extsize 100 --outdir $OUTPUTDIR

  if [ $CALLBROADPEAK == "yes" ]
  then
    macs2 callpeak -t $OUTPUTDIR/mapped_reads.bam --broad -n peaks -g $MACSGSIZE --nomodel --extsize 100 --outdir $OUTPUTDIR
  
    cut -f 1-6 $OUTPUTDIR/peaks_peaks.narrowPeak > $OUTPUTDIR/peaks_merged.bed
    cut -f 1-6 $OUTPUTDIR/peaks_peaks.broadPeak >> $OUTPUTDIR/peaks_merged.bed
  fi
}

hichipbowtie1() {
  if [ $# -lt 4 ]
  then
    echo "Not enough arguments for bowtie 1 alignment, see invocation"
    exit 1
  fi
  
  TARGETDIR="$1"
  
  if [ ! -e "$TARGETDIR" ]
  then
    echo "Invocation of bowtie 1 alignment tries to use directory that does not exist!"
    exit 1
  fi
  
  if [ ! -d "$TARGETDIR" ]
  then
    echo "Invocation of bowtie 1 alignment tries to use location that is not a directory!"
    exit 1
  fi
  
  FASTQFILE="$2"
  OUTPUTBAM="$3"
  OUTPUTSORTEDBAM="$4"
  
  TMPSAM=".$RANDOM.sam"
  
  bowtie -n 1 -m 1 -p 6 --sam $BOWTIEIDX $TARGETDIR/$FASTQFILE > $TARGETDIR/$TMPSAM 
  
  if [ $? -ne 0 ]
  then
    echo "Failed to align FASTQ file $FASTQFILE, see error messages"
    exit 1
  fi
  
  samtools view -Sb $TARGETDIR/$TMPSAM > $TARGETDIR/$OUTPUTBAM 
  
  if [ $? -ne 0 ]
  then
    echo "Failed to convert SAM file into BAM file, see error messages"
    exit 1
  fi
  
  rm $TARGETDIR/$TMPSAM
  
  ( 
    cd $TARGETDIR
    samtools sort -Obam -@ 6 -n -Treaddata $OUTPUTBAM > $OUTPUTSORTEDBAM
  )
  
  if [ ! -e "$TARGETDIR/$OUTPUTSORTEDBAM" ] ## sanity check
  then
    echo "Failed to generate sorted BAM file $OUTPUTSORTEDBAM"
    exit 1
  fi
}

hichipbowtie1parallel() {
  if [ $# -lt 4 ]
  then
    echo "Not enough arguments for parallel bowtie 1 alignment, see invocation"
    exit 1
  fi
  
  TARGETDIR="$1"
  
  if [ ! -e "$TARGETDIR" ]
  then
    echo "Invocation of bowtie 1 alignment tries to use directory that does not exist!"
    exit 1
  fi
  
  if [ ! -d "$TARGETDIR" ]
  then
    echo "Invocation of bowtie 1 alignment tries to use location that is not a directory!"
    exit 1
  fi
  
  FASTQFILE="$2"
  OUTPUTBAM="$3"
  OUTPUTSORTEDBAM="$4"
  
  TMPSAM=".$RANDOM.sam"
  
  dispatch "bowtie -n 1 -m 1 -p 6 --sam $BOWTIEIDX $TARGETDIR/$FASTQFILE > $TARGETDIR/$TMPSAM; \ 
  samtools view -Sb $TARGETDIR/$TMPSAM > $TARGETDIR/$OUTPUTBAM; \
  rm $TARGETDIR/$TMPSAM; \
  (cd $TARGETDIR; samtools sort -Obam -@ 6 -n -Treaddata$RANDOM $OUTPUTBAM > $OUTPUTSORTEDBAM);"
  
  #if [ ! -e "$TARGETDIR/$OUTPUTSORTEDBAM" ] ## sanity check
  #then
  #  echo "Failed to generate sorted BAM file $OUTPUTSORTEDBAM"
  #  exit 1
  #fi
}

mergebamfiles() {
  if [ $# -lt 1 ]
  then
    echo "Failed to pass correct arguments to BAM file merging"
    exit 1
  fi
  
  OUTPUTBAM="$1"
  shift
  
  samtools merge -@6 -Obam -n $OUTPUTBAM $@
  
  if [ $? -ne 0 ]
  then
    echo "Failed to merge BAM files, see error messages"
    exit 1
  fi
}

hichip() {
  echo "Running in HiChIP mode (WARNING: experimental)"
  
  if [ "$HICHIPLIGATIONJUNCTION" == "none" ];
  then
    helpmenu "Error: when using HiChIP mode, need to set the expected ligation junction sequence"
    exit 1
  fi
  
  if [ "$HICHIPRESEQUENCE" == "none" ];
  then
    helpmenu "Error: when running in HiChIP mode, need to see the RE digestion sequence"
    exit 1
  fi
  
  if [ "$HICHIPGENOMEFASTA" == "none" ];
   then
    helpmenu "Error: when running in HiChIP mode, need to see the genome FASTA file"
    exit 1
  fi
  
  echo "Digesting genome..."
  
  $SCRIPTDIR/find-fragments.pl $HICHIPRESEQUENCE $HICHIPGENOMEFASTA $OUTPUTDIR/re-sites.bed $OUTPUTDIR/fragments.bed
  
  if [ $? -ne 0 ];
  then
    echo "Error: failed to digest the genome, see error messages"
    exit 1
  fi
  
  LEFTWITHJUNCTION="$OUTPUTDIR/tmp/left_with_junction.fq"
  RIGHTWITHJUNCTION="$OUTPUTDIR/tmp/right_with_junction.fq"
  LEFTNOJUNCTION="$OUTPUTDIR/tmp/left_no_junction.fq"
  RIGHTNOJUNCTION="$OUTPUTDIR/tmp/right_no_junction.fq"
  
  echo "Searching for and removing ligation junctions..."
  
  if [ $PARALLEL = "on" ]
  then

    dispatch "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/leftreads"
    dispatch "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD | split -l $SPLITNUM - $OUTPUTDIR/tmp/rightreads"
    
    wait
    
    LEFTREADS=($(ls $OUTPUTDIR/tmp/leftreads*))
    RIGHTREADS=($(ls $OUTPUTDIR/tmp/rightreads*))
    
    if [ ${#LEFTREADS[@]} -eq 0 ]
    then
      echo "Error: spliting reads into sub-files failed"
      exit 1
    fi
    
    if [ ${#RIGHTREADS[@]} -eq 0 ]
    then
      echo "Error: spliting reads into sub-files failed"
      exit 1
    fi
    
    
    for ((i=0;i<${#LEFTREADS[@]};++i)); do
      dispatch cutadapt -f fastq -n 3 -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/left_trimmed_$i.fastq --untrimmed-output=$OUTPUTDIR/tmp/left_untrimmed_$i.fastq -p $OUTPUTDIR/tmp/right_left_trimmed_$i.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/right_left_untrimmed_$i.fastq ${LEFTREADS[$i]} ${RIGHTREADS[$i]}
    done
    
    wait
    
    for ((i=0;i<${#LEFTREADS[@]};++i)); do
      dispatch cutadapt -f fastq -n 3 -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/right_trimmed_$i.fastq --untrimmed-output=$OUTPUTDIR/tmp/right_neither_trimmed_$i.fastq -p $OUTPUTDIR/tmp/left_right_trimmed_$i.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/left_neither_trimmed_$i.fastq $OUTPUTDIR/tmp/right_left_untrimmed_$i.fastq $OUTPUTDIR/tmp/left_untrimmed_$i.fastq
    done
    
    wait
  
    for ((i=0;i<${#LEFTREADS[@]};++i)); do
      dispatch cutadapt -f fastq -n 3 -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/right_and_left_trimmed_$i.fastq --untrimmed-output=$OUTPUTDIR/tmp/right_left_only_trimmed_$i.fastq -p $OUTPUTDIR/tmp/left_right_and_left_trimmed_$i.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/left_left_only_trimmed_$i.fastq $OUTPUTDIR/tmp/right_left_trimmed_$i.fastq $OUTPUTDIR/tmp/left_trimmed_$i.fastq

    done

    wait
    
    if [[ "$KEEPTMP" == "no" ]];
    then
      ### these temporary files can take up a lot of space, so clear these up if possible to make more space
      rm ${LEFTREADS[@]} ${RIGHTREADS[@]}
    fi
    
    dispatch "cat $OUTPUTDIR/tmp/left_right_trimmed_*.fastq $OUTPUTDIR/tmp/left_right_and_left_trimmed_*.fastq $OUTPUTDIR/tmp/left_left_only_trimmed_*.fastq > $LEFTWITHJUNCTION"
    dispatch "cat $OUTPUTDIR/tmp/right_trimmed_*.fastq  $OUTPUTDIR/tmp/right_and_left_trimmed_*.fastq $OUTPUTDIR/tmp/right_left_only_trimmed_*.fastq > $RIGHTWITHJUNCTION"
  
    dispatch "cat $OUTPUTDIR/tmp/left_neither_trimmed_*.fastq > $LEFTNOJUNCTION"
    dispatch "cat $OUTPUTDIR/tmp/right_neither_trimmed_*.fastq > $RIGHTNOJUNCTION"
  
    wait
    
    if [[ "$KEEPTMP" == "no" ]];
    then
      ### these temporary files can take up a lot of space, so clear these up if possible to make more space
      rm $OUTPUTDIR/tmp/left_right_trimmed_*.fastq 
      rm $OUTPUTDIR/tmp/left_right_and_left_trimmed_*.fastq 
      rm $OUTPUTDIR/tmp/left_left_only_trimmed_*.fastq 
      rm $OUTPUTDIR/tmp/right_trimmed_*.fastq  
      rm $OUTPUTDIR/tmp/right_and_left_trimmed_*.fastq 
      rm $OUTPUTDIR/tmp/right_left_only_trimmed_*.fastq 
      rm $OUTPUTDIR/tmp/left_neither_trimmed_*.fastq 
      rm $OUTPUTDIR/tmp/right_neither_trimmed_*.fastq 
      rm $OUTPUTDIR/tmp/left_trimmed_*.fastq
      rm $OUTPUTDIR/tmp/left_untrimmed_*.fastq
      rm $OUTPUTDIR/tmp/right_left_untrimmed_*.fastq
      rm $OUTPUTDIR/tmp/right_left_trimmed_*.fastq
    fi  
    
  else
    LEFTTMP="$OUTPUTDIR/tmp/left_reads.fq"
    RIGHTTMP="$OUTPUTDIR/tmp/right_reads.fq"
  
    verbosecmd "$CATFUNC $LEFTREADS | $PREPROCESSINGCMD > $LEFTTMP"
    verbosecmd "$CATFUNC $RIGHTREADS | $PREPROCESSINGCMD > $RIGHTTMP"
    
    if [ ! -e "$LEFTTMP" ];
    then
      echo "Generation of first read temporary file failed"
      exit 1
    fi
  
    if [ ! -e "$RIGHTTMP" ];
    then
      echo "Generation of first read temporary file failed"
      exit 1
    fi
    
    cutadapt -n 3 -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/left_trimmed.fastq --untrimmed-output=$OUTPUTDIR/tmp/left_untrimmed.fastq -p $OUTPUTDIR/tmp/right_left_trimmed.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/right_left_untrimmed.fastq $OUTPUTDIR/tmp/left_reads.fq $OUTPUTDIR/tmp/right_reads.fq
    
    if [ $? -ne 0 ];
    then
      echo "Read trimming step failed, see error messages"
      exit 1
    fi
  
    cutadapt -n 3 -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/right_trimmed.fastq --untrimmed-output=$OUTPUTDIR/tmp/right_neither_trimmed.fastq -p $OUTPUTDIR/tmp/left_right_trimmed.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/left_neither_trimmed.fastq $OUTPUTDIR/tmp/right_left_untrimmed.fastq $OUTPUTDIR/tmp/left_untrimmed.fastq

    if [ $? -ne 0 ];
    then
      echo "Read trimming step failed, see error messages"
      exit 1
    fi
    
    cutadapt -n 3 -a $HICHIPLIGATIONJUNCTION -m $MINREADLENGTH -o $OUTPUTDIR/tmp/right_and_left_trimmed.fastq --untrimmed-output=$OUTPUTDIR/tmp/right_left_only_trimmed.fastq -p $OUTPUTDIR/tmp/left_right_and_left_trimmed.fastq --untrimmed-paired-output=$OUTPUTDIR/tmp/left_left_only_trimmed.fastq $OUTPUTDIR/tmp/right_left_trimmed.fastq $OUTPUTDIR/tmp/left_trimmed.fastq

    if [ $? -ne 0 ];
    then
      echo "Read trimming step failed, see error messages"
      exit 1
    fi
    
        
    if [[ "$KEEPTMP" == "no" ]];
    then
      ### these temporary files can take up a lot of space, so clear these up if possible to make more space
      rm $LEFTTMP $RIGHTTMP
    fi
    
    cat $OUTPUTDIR/tmp/left_right_trimmed.fastq $OUTPUTDIR/tmp/left_right_and_left_trimmed.fastq $OUTPUTDIR/tmp/left_left_only_trimmed.fastq > $LEFTWITHJUNCTION
    cat $OUTPUTDIR/tmp/right_trimmed.fastq  $OUTPUTDIR/tmp/right_and_left_trimmed.fastq $OUTPUTDIR/tmp/right_left_only_trimmed.fastq > $RIGHTWITHJUNCTION
  
    cat $OUTPUTDIR/tmp/left_neither_trimmed.fastq > $LEFTNOJUNCTION
    cat $OUTPUTDIR/tmp/right_neither_trimmed.fastq > $RIGHTNOJUNCTION
    
    if [[ "$KEEPTMP" == "no" ]];
    then
      ### these temporary files can take up a lot of space, so clear these up if possible to make more space
      rm $OUTPUTDIR/tmp/left_trimmed.fastq $OUTPUTDIR/tmp/left_untrimmed.fastq $OUTPUTDIR/tmp/left_right_trimmed.fastq $OUTPUTDIR/tmp/left_right_and_left_trimmed.fastq $OUTPUTDIR/tmp/left_left_only_trimmed.fastq $OUTPUTDIR/tmp/right_trimmed.fastq  $OUTPUTDIR/tmp/right_and_left_trimmed.fastq $OUTPUTDIR/tmp/right_left_only_trimmed.fastq $OUTPUTDIR/tmp/left_neither_trimmed.fastq $OUTPUTDIR/tmp/right_neither_trimmed.fastq
    fi
  fi
  
  if [ ! -e $LEFTWITHJUNCTION ]
  then
    echo "Error: Cannot find temporary file with all trimmed first read pairs!"
    exit 1
  fi
  
  if [ ! -e $RIGHTWITHJUNCTION ]
  then
    echo "Error: Cannot find temporary file with all trimmed second read pairs!"
    exit 1
  fi
  
  if [ ! -e $LEFTNOJUNCTION ]
  then
    echo "Error: Cannot find temporary file with all non-trimmed first read pairs!"
    exit 1
  fi
  
  if [ ! -e $RIGHTNOJUNCTION ]
  then
    echo "Error: Cannot find temporary file with all non-trimmed second read pairs!"
    exit 1
  fi
  
  #echo "Total PETs: " $(cat $OUTPUTDIR/tmp/left_reads.fq | wc -l) > $OUTPUTDIR/logs/trimming-report.txt
  #echo "PETs with junction: " $(cat $OUTPUTDIR/tmp/left_with_junction.fq | wc -l) >> $OUTPUTDIR/logs/trimming-report.txt
  #echo "PETs without junction: " $(cat $OUTPUTDIR/tmp/left_no_junction.fq | wc -l) >> $OUTPUTDIR/logs/trimming-report.txt
  
  echo "Aligning PETs..."

  if [ "$PARALLEL" = "on" ]
  then
    hichipbowtie1parallel $OUTPUTDIR/tmp left_with_junction.fq  left_with_junction.bam  left_with_junction.sorted.bam
    hichipbowtie1parallel $OUTPUTDIR/tmp right_with_junction.fq right_with_junction.bam right_with_junction.sorted.bam
    hichipbowtie1parallel $OUTPUTDIR/tmp left_no_junction.fq    left_no_junction.bam    left_no_junction.sorted.bam
    hichipbowtie1parallel $OUTPUTDIR/tmp right_no_junction.fq   right_no_junction.bam   right_no_junction.sorted.bam
    
    wait
    
    if [ ! -e "$OUTPUTDIR/tmp/left_with_junction.sorted.bam" ]
    then
      echo "Failed to generate file $OUTPUTDIR/tmp/left_with_junction.sorted.bam"
      exit 1
    fi
    
    if [ ! -e "$OUTPUTDIR/tmp/right_with_junction.sorted.bam" ]
    then
      echo "Failed to generate file $OUTPUTDIR/tmp/right_with_junction.sorted.bam"
      exit 1
    fi
    
    if [ ! -e "$OUTPUTDIR/tmp/left_no_junction.sorted.bam" ]
    then
      echo "Failed to generate file $OUTPUTDIR/tmp/left_no_junction.sorted.bam"
      exit 1
    fi
    
    if [ ! -e "$OUTPUTDIR/tmp/right_no_junction.sorted.bam" ]
    then
      echo "Failed to generate file $OUTPUTDIR/tmp/right_no_junction.sorted.bam"
      exit 1
    fi

  else
    hichipbowtie1 $OUTPUTDIR/tmp left_with_junction.fq  left_with_junction.bam  left_with_junction.sorted.bam
    hichipbowtie1 $OUTPUTDIR/tmp right_with_junction.fq right_with_junction.bam right_with_junction.sorted.bam
    hichipbowtie1 $OUTPUTDIR/tmp left_no_junction.fq    left_no_junction.bam    left_no_junction.sorted.bam
    hichipbowtie1 $OUTPUTDIR/tmp right_no_junction.fq   right_no_junction.bam   right_no_junction.sorted.bam
  fi

  echo "Filtering and processing PETs..."

  ### run mode to check 
  $BINDIR/process-hichip-bam-files $OUTPUTDIR/tmp/left_with_junction.sorted.bam $OUTPUTDIR/tmp/right_with_junction.sorted.bam $OUTPUTDIR/tmp/left_no_junction.sorted.bam $OUTPUTDIR/tmp/right_no_junction.sorted.bam $OUTPUTDIR/mapped_reads.bam $OUTPUTDIR/unmapped_reads.bam $OUTPUTDIR/logs/.alignment-statistics.txt

  if [ $? -ne 0 ]
  then
    echo "Failed to generated BAM file of mapped reads, see error messages"
    exit 1
  fi

  
  (
    cd $OUTPUTDIR
    ## 1024 is the DUP flag in samtools, where duplicates are predicted by process-hichip-bam-files
    samtools view -b -F 1024 mapped_reads.bam > mapped_reads.rmdup.bam
    samtools sort -@8 -Obam -Tmappedtmp mapped_reads.rmdup.bam > mapped_reads.rmdup.sorted.bam
  )
  
  if [ ! -e "$OUTPUTDIR/mapped_reads.rmdup.bam" ] || [ ! -e "$OUTPUTDIR/mapped_reads.rmdup.sorted.bam" ]
  then
    echo "Failed to generated processed BAM, see error messages"
    exit 1
  fi

  (
    cd $OUTPUTDIR
    samtools index mapped_reads.rmdup.sorted.bam
  )
  
  if [ ! -e "$OUTPUTDIR/mapped_reads.rmdup.sorted.bam.bai" ]
  then
    echo "Failed to index BAM file, see error messages"
    exit 1
  fi
}

### process command line options

TEMP=`getopt -o o:hvapm: -l output:,mode:,noskip,splitnum:,keep-tmp,lsf-queue:,forward-linker:,reverse-linker:,ab-linker,a-linker:,b-linker:,pp:,min-len:,macs-gsize:,callbroadpeak,junction:,re-sequence:,genome-fasta:,bsub-verbose -n 'origami' -- "$@"`
eval set -- "$TEMP"

while [ $# -ge 1 ]; do
	case "$1" in
		--)
			shift
			break
			;;
		-o|--output)
			OUTPUTDIR="$2"
			shift
			;;
		-h)
			helpmenu
			exit 0
			;;
		-v)
			VERBOSE=on
			;;
		--bsub-verbose)
		  VERBOSE=on
		  BSUBVERBOSE=on
		  ;;
		--noskip)
			SKIP=off
			;;
		-p)
			PARALLEL=on
			;;
		--mode)
		  RUNMODE="$2"
		  shift
		  ;;
		--splitnum)
		  SPLITNUM=$(expr "$2" \* 4)
		  shift
		  ;;
		--keep-tmp)
		  KEEPTMP=yes
		  ;;
		--lsf-queue)
		  LSFQUEUE="$2"
		  PARALLEL=on
		  shift
		  ;;
		--forward-linker)
		  FORWARDLINKER="$2"
		  shift
		  ;;
		--reverse-linker)
		  REVERSELINKER="$2"
		  shift
		  ;;
		--ab-linker)
		  echo "This option is deprecated! Use --mode=ab instead"
		  RUNMODE=ab
		  ;;
		--a-linker)
		  ABLINKERA="$2"
		  RUNMODE=ab
		  shift
		  ;;
		--b-linker)
		  ABLINKERB="$2"
		  RUNMODE=ab
		  shift
		  ;;
		--pp)
	    PREPROCESSINGCMD="$2"
	    shift
	    ;;
	  -m|--min-len)
	    MINREADLENGTH="$2"
	    shift
	    ;;
	  --macs-gsize)
	    MACSGSIZE="$2"
	    shift
	    ;;
	  --callbroadpeak)
	   CALLBROADPEAK=yes
	   ;;
	  --junction)
	   HICHIPLIGATIONJUNCTION="$2"
	   RUNMODE=hichip
	   shift
	   ;;
	  --re-sequence)
	   HICHIPRESEQUENCE="$2"
	   shift
	   ;;
	  --genome-fasta)
  	 HICHIPGENOMEFASTA="$2"
  	 shift
  	 ;;

	esac
	shift
done

verbose "Command line: $ORIGINALCMD"


if [ $# -lt 3 ];
then
  helpmenu "Error: did not supply necessary file name arguments"
  exit 1
fi

BOWTIEIDX="$1"
LEFTREADS="$2"
RIGHTREADS="$3"

verbose "Bowtie index: $BOWTIEIDX"
verbose "Left reads file: $LEFTREADS"
verbose "Right reads file: $RIGHTREADS"

checkbowtiefiles $BOWTIEIDX

if [ ! -e "$LEFTREADS" ];
then
  helpmenu "Error: file $LEFTREADS does not exist!"
  exit 1
fi

if [ ! -e "$RIGHTREADS" ];
then
  helpmenu "Error: file $RIGHTREADS does not exist!"
  exit 1
fi

if [[ "$PARALLEL" == "on" ]] && [[ ! -n "$LSFQUEUE" ]];
then
  helpmenu "Error: if using -p, then must use --lsf-queue"
  exit 1
fi


echo "Launching origami..."


verbose "Analyzing $LEFTREADS and $RIGHTREADS"

verbose "Creating output directory"
mkdir $OUTPUTDIR
verbose "Creating temporary file directory"
mkdir $OUTPUTDIR/tmp
verbose "Creating logs directory"
mkdir $OUTPUTDIR/logs

echo "Running origami with the following command line: $ORIGINALCMD" > $OUTPUTDIR/logs/alignment-execution.txt

if [[ "$BSUBVERBOSE" != "on" ]] && [[ "$PARALLEL" == "on" ]];
then
  export BSUB_QUIET=Y
fi

## Get file suffix (assumes same suffix for both left and right files)
FILESUFFIX=${LEFTREADS##*.}

case "$FILESUFFIX" in
  gz)
    if [[ $LEFTREADS =~ ".tar.gz" ]];
    then
      CATFUNC="tar --strip-components=5 -xzOf"
    else
      CATFUNC=zcat
    fi
    ;;
  bz2)
    CATFUNC=bzcat
    ;;
  *)
    CATFUNC=cat
    ;;
esac

if [[ "$SKIP" == "off" || ! -e "$OUTPUTDIR/mapped_reads.bam" ]];
then
  case "$RUNMODE" in
    long)
      linkertrimming "no"
    ;;
    ab)
      linkertrimming "yes"
    ;;
    hichip)
      hichip
    ;;
    *)
      helpmenu "Error: invalid run mode entered, must be one of: long, ab, or hichip"
      exit 1
    ;;
  esac
else
  echo "Skipping read processing, already detect the presence of $OUTPUTDIR/mapped_reads.bam"
fi

wait #finish all remaining processes from read trimming


$SCRIPTDIR/library-qc-stats.pl $OUTPUTDIR/mapped_reads.bam $OUTPUTDIR/logs/qc-report.txt


if [[ "$KEEPTMP" == "no" ]];
then
  echo "Cleaning up temporary directory"
  rm -r $OUTPUTDIR/tmp
fi


echo "Done"
